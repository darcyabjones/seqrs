use ::TranslationTable;
use ::Codon;
use ::alphabets::DNA::*;

pub struct Standard;

impl TranslationTable<Codon<DNA>, AA> for Standard {
    fn translation_table(&self, k: &Codon<DNA>) -> AA {
        match k {
            Codon(A, A, A) => AA::K,
            Codon(A, A, C) => AA::N,
            Codon(A, A, G) => AA::K,
            Codon(A, A, R) => AA::K,
            Codon(A, A, T) => AA::N,
            Codon(A, A, Y) => AA::N,
            Codon(A, C, _) => AA::T,
            Codon(A, G, A) => AA::R,
            Codon(A, G, G) => AA::R,
            Codon(A, G, T) => AA::S,
            Codon(A, G, C) => AA::S,
            Codon(A, G, Y) => AA::S,
            Codon(A, G, R) => AA::R,
            Codon(A, T, A) => AA::I,
            Codon(A, T, T) => AA::I,
            Codon(A, T, C) => AA::I,
            Codon(A, T, Y) => AA::I,
            Codon(A, T, W) => AA::I,
            Codon(A, T, H) => AA::I,
            Codon(A, T, G) => AA::M,
            Codon(C, A, A) => AA::Q,
            Codon(C, A, C) => AA::H,
            Codon(C, A, G) => AA::Q,
            Codon(C, A, R) => AA::Q,
            Codon(C, A, T) => AA::H,
            Codon(C, A, Y) => AA::H,
            Codon(C, C, _) => AA::P,
            Codon(C, G, _) => AA::R,
            Codon(C, T, _) => AA::L,
            Codon(M, G, A) => AA::R,
            Codon(M, G, G) => AA::R,
            Codon(M, G, R) => AA::R,
            Codon(M, T, A) => AA::J,
            Codon(M, T, C) => AA::J,
            Codon(M, T, M) => AA::J,
            Codon(M, T, T) => AA::J,
            Codon(M, T, W) => AA::J,
            Codon(M, T, Y) => AA::J,
            Codon(M, T, H) => AA::J,
            Codon(G, A, A) => AA::E,
            Codon(G, A, C) => AA::D,
            Codon(G, A, G) => AA::E,
            Codon(G, A, R) => AA::E,
            Codon(G, A, T) => AA::D,
            Codon(G, A, Y) => AA::D,
            Codon(G, C, _) => AA::A,
            Codon(G, G, _) => AA::G,
            Codon(G, T, _) => AA::V,
            Codon(R, A, C) => AA::B,
            Codon(R, A, T) => AA::B,
            Codon(R, A, Y) => AA::B,
            Codon(S, A, A) => AA::Z,
            Codon(S, A, G) => AA::Z,
            Codon(S, A, R) => AA::Z,
            Codon(T, A, A) => AA::Stop,
            Codon(T, A, C) => AA::Y,
            Codon(T, A, G) => AA::Stop,
            Codon(T, A, R) => AA::Stop,
            Codon(T, A, T) => AA::Y,
            Codon(T, A, Y) => AA::Y,
            Codon(T, C, _) => AA::S,
            Codon(T, G, A) => AA::Stop,
            Codon(T, G, C) => AA::C,
            Codon(T, G, G) => AA::W,
            Codon(T, G, R) => AA::Stop,
            Codon(T, G, T) => AA::C,
            Codon(T, G, Y) => AA::C,
            Codon(T, R, A) => AA::Stop,
            Codon(T, T, A) => AA::L,
            Codon(T, T, C) => AA::F,
            Codon(T, T, G) => AA::L,
            Codon(T, T, R) => AA::L,
            Codon(T, T, T) => AA::F,
            Codon(T, T, Y) => AA::F,
            Codon(W, T, A) => AA::J,
            Codon(Y, T, A) => AA::L,
            Codon(Y, T, G) => AA::L,
            Codon(Y, T, R) => AA::L,
            Codon(H, T, A) => AA::J,
            _              => AA::X,
        }
    }
}
